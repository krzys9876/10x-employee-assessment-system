name: Pull Request Workflow

on:
  pull_request:
    branches: [ main ]
  push:
    branches: [ main ]
    
jobs:
  lint:
    name: Lint Code
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
      
      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: 23.9.0
          cache: 'npm'
      
      - name: Install dependencies
        run: npm ci --legacy-peer-deps
      
      - name: Run linting
        run: npm run lint
        
  unit-test:
    name: Unit Tests
    needs: lint
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
      
      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: 23.9.0
          cache: 'npm'
      
      - name: Install dependencies
        run: npm ci --legacy-peer-deps
      
      - name: Run unit tests with coverage
        run: npm run test:coverage
      
      - name: Upload unit test coverage
        uses: actions/upload-artifact@v4
        with:
          name: unit-test-coverage
          path: coverage/
          retention-days: 7
  
  # e2e-test:
  #   name: E2E Tests
  #   needs: lint
  #   runs-on: ubuntu-latest
  #   environment: integration
  #   env:
  #     SUPABASE_URL: ${{ secrets.SUPABASE_URL }}
  #     SUPABASE_KEY: ${{ secrets.SUPABASE_KEY }}
  #     OPENROUTER_API_KEY: ${{ secrets.OPENROUTER_API_KEY }}
  #   steps:
  #     - name: Checkout code
  #       uses: actions/checkout@v4
  #     
  #     - name: Setup Node.js
  #       uses: actions/setup-node@v4
  #       with:
  #         node-version: 23.9.0
  #         cache: 'npm'
  #     
  #     - name: Install dependencies
  #       run: npm ci --legacy-peer-deps
  #     
  #     - name: Install Playwright browsers
  #       run: npx playwright install --with-deps
  #     
  #     - name: Run E2E tests
  #       run: npx playwright test --coverage
  #     
  #     - name: Upload E2E test coverage
  #       uses: actions/upload-artifact@v4
  #       with:
  #         name: e2e-test-coverage
  #         path: coverage-e2e/
  #         retention-days: 7
  
  status-comment:
    name: PR Status Comment
    needs: [unit-test]
    runs-on: ubuntu-latest
    if: ${{ always() && needs.unit-test.result == 'success' }}
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
      
      - name: Download unit test coverage
        uses: actions/download-artifact@v4
        with:
          name: unit-test-coverage
          path: coverage
      
      - name: Create status comment
        uses: actions/github-script@v7
        with:
          github-token: ${{ secrets.GITHUB_TOKEN }}
          script: |
            const fs = require('fs');
            
            // You would need to parse your coverage files here
            // This is a simplified example
            let unitCoverage = "Unit tests passed successfully!";
            
            try {
              if (fs.existsSync('./coverage/coverage-summary.json')) {
                const unitData = JSON.parse(fs.readFileSync('./coverage/coverage-summary.json', 'utf8'));
                unitCoverage = `Unit test coverage: ${unitData.total.statements.pct}%`;
              }
            } catch (error) {
              console.error('Error reading coverage files:', error);
            }
            
            const body = `## Pull Request Checks Status âœ…
            
            All checks have passed successfully!
            
            ### Coverage Summary
            - ${unitCoverage}
            
            *Build completed at ${new Date().toISOString()}*
            `;
            
            github.rest.issues.createComment({
              issue_number: context.issue.number,
              owner: context.repo.owner,
              repo: context.repo.repo,
              body: body
            }); 